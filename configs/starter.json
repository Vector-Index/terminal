{
  "config": {
    "prompt": "",
    "intro": "Welcome to the JavaScript CLI\r\n\r\nType 'help' to see a list of available commands.\r\n\r\n____   ____             __                \r\n\\   \\ /   /____   _____/  |_  ___________ \r\n \\   Y   // __ \\_/ ___\\   __\\/  _ \\_  __ \\\r\n  \\     /\\  ___/\\  \\___|  | (  <_> )  | \\/\r\n   \\___/  \\___  >\\___  >__|  \\____/|__|   \r\n              \\/     \\/                   \r\n.___            .___             \r\n|   | ____    __| _/____ ___  ___\r\n|   |/    \\  / __ |/ __ \\\\  \\/  /\r\n|   |   |  \\/ /_/ \\  ___/ >    < \r\n|___|___|  /\\____ |\\___  >__/\\_ \\\r\n         \\/      \\/    \\/      \\/\r\n\r\nFor more details, visit the User Manual: https://js.vectorindex.cloud/help?url=https://https://raw.githubusercontent.com/Vector-Index/terminal/refs/heads/main/manuals/terminal.en.md\r\n",
    "data": {
      "help": "- help: Show available commands.\r\n- clear: Clear the screen.\r\n- exit: Close the session.\r\n- //editConfig(): Open the web editor to edit the current configuration. Check scripts at https://github.com/Vector-Index/terminal/tree/main/scripts/js",
      "proxy": "https://api.codetabs.com/v1/proxy/?quest=${url}",
      "urls": {},
      "mqtt": {
        "broker": "wss://test.mosquitto.org:8081",
        "options": {}
      }
    },
    "scripts": {
      "js": {
        "foo": {
          "text": "function foo() { console.log('foo'); return 'foo'; }; foo();",
          "mode": "javascript"
        },
        "reset": {
          "text": "// Fetch remote config\r\nasync function fetchConfig() {\r\n    const url = `https://raw.githubusercontent.com/Vector-Index/terminal/refs/heads/main/configs/starter.json`\r\n    const responseText = await window.utils.api.get(url)\r\n    console.log(responseText)\r\n    // Replace/reload the current config\r\n    try {\r\n        config.value = JSON.parse(responseText).config\r\n        data = config.value.data\r\n        scripts = config.value.scripts\r\n        return `Fetched config from ${url}`\r\n    } catch (error) {\r\n        return `Error: ${error}`\r\n    }\r\n}\r\nfetchConfig()",
          "mode": "javascript"
        },
        "fetchScript": {
          "text": "// fetchScript(\"bar.js\", \"script.js\")\r\nasync function fetchScript(remote, local) {\r\n    if (!local) {\r\n        local = remote\r\n    }\r\n    try {\r\n        const [remoteName, remoteExtension] = remote.split(\".\")\r\n        if (!remoteExtension in [\"js\", \"py\"]) {\r\n            throw new Error(\"Only support .js and .py\")\r\n        }\r\n        const url = `https://raw.githubusercontent.com/Vector-Index/terminal/refs/heads/main/scripts/${remoteExtension}/${remoteName}.${remoteExtension}`\r\n        const script = await window.utils.api.get(url)\r\n        if (script.startsWith(\"404\")) {\r\n            throw new Error(`${remote} does not exist`)\r\n        }\r\n        const [localName, localExtension] = local.split(\".\")\r\n        if (localExtension !== remoteExtension) {\r\n            throw new Error(\"Local script and remote script must have the same extension\")\r\n        }\r\n        // scripts[localExtension][localName] = script\r\n        scripts[localExtension][localName] = {\r\n            \"text\": script,\r\n            \"mode\": \"javascript\"\r\n        }\r\n        return `Fetched scripts.${remoteExtension}.${remoteName} -> scripts.${localExtension}.${localName}`\r\n    } catch (error) {\r\n        console.log(error)\r\n        return `Error: ${error}`\r\n    }\r\n}\r\nfetchScript(args[0], args[1])",
          "mode": "javascript"
        },
        "listScripts": {
          "text": "// List scripts from remote\r\nasync function listScripts(extensions) {\r\n    if (!extensions) {\r\n        // extensions = [\"js\", \"py\"]\r\n        extensions = [\"js\"]\r\n    }\r\n    const scripts = []\r\n    for (const extension of extensions) {\r\n        const url = `https://api.github.com/repos/Vector-Index/terminal/contents/scripts/${extension}`\r\n        const responseText = await window.utils.api.get(url)\r\n        // console.log(responseText)\r\n        try {\r\n            const contents = JSON.parse(responseText)\r\n            for (const content of contents) {\r\n                if (content.type === \"file\" && content.name.endsWith(`.${extension}`)) {\r\n                    scripts.push(content.name)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            return `Error: ${error}`\r\n        }\r\n    }\r\n    return scripts.join(\"\\n\")\r\n}\r\nlistScripts(args)",
          "mode": "javascript"
        },
        "cleanHTML": {
          "text": "async function cleanHTML(htmlString) {\n\tif (htmlString instanceof Promise) {\n\t\thtmlString = await htmlString\n\t}\n\treturn window.utils.cleanHTML(htmlString)\n}\ncleanHTML(args)",
          "mode": "javascript"
        }
      },
      "py": {}
    }
  },
  "settings": true,
  "load": true
}